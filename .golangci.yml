# Ref: https://golangci-lint.run/usage/configuration/

run:
  #  skip-dirs:
  #    - autogenerated_by_my_lib
  #    - src/external_libs
  #
  #  skip-files:
  #    - ".*\\.my\\.go$"
  #    - lib/bad.go

  build-tags:
    - integration
    - experiment

linters-settings:
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20

linters:
  fast: true
  disable-all: true
  enable:
    - bodyclose
    - golint
    - scopelint
    - stylecheck
    - misspell
    - gomnd
    - gosec
    - gochecknoglobals
    - deadcode
    - gosimple
    - govet
    - ineffassign
    - structcheck
    - typecheck
    - varcheck
    - gofmt
    - goimports
    - gocognit
    - gocyclo

issues:
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  # new: true

  # Show only new issues created after git revision `REV`
  # new-from-rev: HEAD~1

  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - gomnd
        - errcheck

    - path: pkg/technical/types/
      linters:
        - gomnd

    - path: pkg/technical/mock/
      linters:
        - gomnd

    - path: pkg/technical/mock/
      linters:
        - golint
        - stylecheck
      text: "use underscores in Go names"

    - linters:
        - golint
      text: "a blank import"

    - linters:
        - golint
        - stylecheck
      text: "comment on exported var"

    - linters:
        - golint
      text: "returns unexported"

    - linters:
        - govet
      text: "composite literal uses unkeyed fields"
